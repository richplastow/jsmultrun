// Generated by CoffeeScript 1.9.2
(function(_oG) {
/*! Jsmultrun 0.0.4 //// MIT Licence //// http://jsmultrun.richplastow.com/ */
var A, B, D, E, F, G, I, JsMultRun, N, O, R, S, SomeClass, T, U, V, X, _o, _oT, _oV;

_oT = 'Jsmultrun';

_oV = '0.0.4';

_o = {};

SomeClass = (function() {
  SomeClass.prototype.C = 'SomeClass';

  SomeClass.prototype.toString = function() {
    return '[object SomeClass]';
  };

  function SomeClass(config) {
    var M;
    if (config == null) {
      config = {};
    }
    M = "/jsmultrun/src/SomeClass/SomeClass.litcoffee SomeClass()\n  ";
    this.x = null;
  }

  SomeClass.prototype.xx = function(yy) {
    var M;
    return M = "/jsmultrun/src/SomeClass/SomeClass.litcoffee SomeClass::xx()\n  ";
  };

  return SomeClass;

})();

SomeClass.xx = function(yy) {
  var M;
  return M = "/jsmultrun/src/SomeClass/SomeClass.litcoffee SomeClass.xx()\n  ";
};

JsMultRun = (function() {
  JsMultRun.prototype.C = 'JsMultRun';

  JsMultRun.prototype.toString = function() {
    return '[object JsMultRun]';
  };

  function JsMultRun(config) {
    var M;
    if (config == null) {
      config = {};
    }
    M = "/jsmultrun/src/JsMultRun.litcoffee JsMultRun()\n  ";
    this.log = _o.valid(M + 'config.', config, 'log <integer 0-9>', 3);
    this.x = null;
  }

  JsMultRun.prototype.xx = function(yy) {
    var M;
    return M = "/jsmultrun/src/JsMultRun.litcoffee JsMultRun::xx()\n  ";
  };

  return JsMultRun;

})();

JsMultRun.xx = function(yy) {
  var M;
  return M = "/jsmultrun/src/JsMultRun.litcoffee JsMultRun.xx()\n  ";
};

A = 'array';

B = 'boolean';

D = 'document';

E = 'error';

F = 'function';

I = 'integer';

N = 'number';

O = 'object';

R = 'regexp';

S = 'string';

U = 'undefined';

X = 'null';

G = _oG;

T = _oT;

V = _oV;

if ('undefined' === typeof console || 'undefined' === typeof console.log) {
  _o = function() {};
} else if ('object' === typeof console.log) {
  _o = Function.prototype.bind(console.log, console);
} else {
  _o = console.log.bind(console);
}

_o.is = function(c, t, f) {
  if (t == null) {
    t = true;
  }
  if (f == null) {
    f = false;
  }
  if (c) {
    return t;
  } else {
    return f;
  }
};

_o.isU = function(x) {
  return _o.U === typeof x;
};

_o.type = function(a) {
  var ta;
  if (null === a) {
    return X;
  }
  ta = typeof a;
  if ({
    undefined: 1,
    string: 1,
    number: 1,
    boolean: 1
  }[ta]) {
    return ta;
  }
  if (!a.nodeName && a.constructor !== Array && /function/i.test('' + a)) {
    return F;
  }
  return {}.toString.call(a).match(/\s([a-z0-9]+)/i)[1].toLowerCase();
};

_o.ex = function(x, a, b) {
  var pos;
  if (-1 === (pos = a.indexOf(x))) {
    return x;
  } else {
    return b.charAt(pos);
  }
};

_o.has = function(h, n, t, f) {
  if (t == null) {
    t = true;
  }
  if (f == null) {
    f = false;
  }
  if (-1 !== h.indexOf(n)) {
    return t;
  } else {
    return f;
  }
};

_o.uid = function(p) {
  return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
};

_o.insert = function(basis, overlay, offset) {
  return basis.slice(0, offset) + overlay + basis.slice(offset + overlay.length);
};

_o.redefine = function(obj, name, value, kind) {
  switch (kind) {
    case 'constant':
      return Object.defineProperty(obj, name, {
        value: value,
        enumerable: true
      });
    case 'private':
      return Object.defineProperty(obj, name, {
        value: value,
        enumerable: false
      });
  }
};

_o.valid = function(M, obj, signature, fallback) {
  var i, key, len, matches, max, min, ref, ref1, rule, tv, type, types, value;
  matches = signature.match(/^([_a-z][_a-z0-9]*)\s+<([|a-z]+)\s*([-0-9]*)>$/);
  if (!matches) {
    throw RangeError("/jsmultrun/src/_o-helpers.litcoffee _o.valid()\n  signature " + signature + " is invalid");
  }
  signature = matches[0], key = matches[1], types = matches[2], rule = matches[3];
  value = obj[key];
  tv = _o.type(value);
  if (U === tv) {
    if (4 === arguments.length) {
      return fallback;
    }
    throw TypeError(M + key + " is undefined and has no fallback");
  }
  ref = types.split('|');
  for (i = 0, len = ref.length; i < len; i++) {
    type = ref[i];
    if ((N === type || I === type) && N === tv) {
      if (I === type && value % 1) {
        throw RangeError(M + key + " is a number but not an integer");
      }
      if (rule) {
        ref1 = rule.split('-'), min = ref1[0], max = ref1[1];
        if (value < min || value > max) {
          throw RangeError(M + key + (" is " + value + " (must be " + rule + ")"));
        }
      }
      return value;
    }
    if (type === tv) {
      if (S === tv && rule) {
        if (!(new RegExp(rule)).test(value)) {
          throw RangeError(M + key + (" fails " + rule));
        }
      }
      return value;
    }
  }
  throw TypeError(M + key + (" is type " + tv + " not " + types));
};

if (F === typeof define && define.amd) {
  define(function() {
    return JsMultRun;
  });
} else if (O === typeof module && module && module.exports) {
  module.exports = JsMultRun;
} else {
  G.JsMultRun = JsMultRun;
}
}).call(this,this);
// Example vendor file. 
